-- Load MacLib UI Library
local MacLib = require(game:GetService("ReplicatedStorage"):WaitForChild("MacLib"))

-- Create Main UI
local ui = MacLib:CreateUI({
    Name = "Senbunzakura | Hub",
    Size = UDim2.new(0, 400, 0, 300),
    Position = UDim2.new(0.5, -200, 0.5, -150),
    Parent = game.Players.LocalPlayer.PlayerGui -- Display UI in the player's GUI
})

-- Create Main Tab
local mainTab = ui:CreateTab({
    Name = "Main",
    Icon = nil -- Optionally add an icon here
})

-- Create Section within Main Tab
local section = mainTab:CreateSection("Main")

-- Divider for UI organization
local divider = mainTab:CreateDivider()

-- Create Toggle for Nape Resizer
local napeToggle = mainTab:CreateToggle({
    Name = "Nape Extender",
    CurrentValue = false,
    Flag = "EnableTitanResizer",
    Callback = function(Value)
        if Value then
            local titansFolder = game.Workspace:WaitForChild("Titans")

            -- Loop through each Titan in the Titans folder
            for _, titan in ipairs(titansFolder:GetChildren()) do
                print("Processing Titan:", titan.Name)

                -- Resize the Nape part inside each Titan's Hitbox
                local hitboxes = titan:FindFirstChild("Hitboxes")
                if hitboxes then
                    local hitFolder = hitboxes:FindFirstChild("Hit")
                    if hitFolder then
                        local napePart = hitFolder:FindFirstChild("Nape")
                        if napePart and napePart:IsA("BasePart") then
                            napePart.Size = Vector3.new(100, 100, 100)
                            print("Resized Nape for Titan:", titan.Name)
                        else
                            warn("No valid 'Nape' part found in Titan:", titan.Name)
                        end
                    else
                        warn("No 'Hit' folder found in Hitboxes for Titan:", titan.Name)
                    end
                else
                    warn("No 'Hitboxes' folder found in Titan:", titan.Name)
                end
            end
            print("Script completed.")
        else
            print("Titan Resizer is disabled.")
        end
    end
})

-- Create Toggle for Nape Visibility
local visibilityToggle = mainTab:CreateToggle({
    Name = "Nape Visibility",
    CurrentValue = false,
    Flag = "EnableNapeVisibility",
    Callback = function(Value)
        local titansFolder = game.Workspace:WaitForChild("Titans")

        -- Loop through each Titan in the Titans folder
        for _, titan in ipairs(titansFolder:GetChildren()) do
            print("Processing Titan:", titan.Name)

            local hitboxes = titan:FindFirstChild("Hitboxes")
            if hitboxes then
                local hitFolder = hitboxes:FindFirstChild("Hit")
                if hitFolder then
                    local napePart = hitFolder:FindFirstChild("Nape")
                    if napePart and napePart:IsA("BasePart") then
                        if Value then
                            -- Set Nape visibility
                            napePart.Transparency = 0.01
                            napePart.Material = Enum.Material.SmoothPlastic
                            print("Made Nape visible for Titan:", titan.Name)
                        else
                            -- Restore Nape visibility
                            napePart.Transparency = 1
                            napePart.Material = Enum.Material.SmoothPlastic
                            print("Restored Nape visibility for Titan:", titan.Name)
                        end
                    else
                        warn("No valid 'Nape' part found in Titan:", titan.Name)
                    end
                else
                    warn("No 'Hit' folder found in Hitboxes for Titan:", titan.Name)
                end
            else
                warn("No 'Hitboxes' folder found in Titan:", titan.Name)
            end
        end
    end
})

-- Create Toggle for Auto Farm Mission (Blade)
local autoFarmToggle = mainTab:CreateToggle({
    Name = "Auto Farm Mission (Blade)",
    CurrentValue = false,
    Flag = "AutoFarmFeature",
    Callback = function(Value)
        if Value then
            print("Auto Farm Enabled")
            
            -- Wait for 3 seconds before auto farming
            wait(3)

            -- Services --
            local VIM = game:GetService("VirtualInputManager")
            local UIS = game:GetService("UserInputService")
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()

            -- Settings --
            local delay = 1  -- Delay between each click in seconds
            local rightClick = false  -- Set to true if you want to right-click, false for left-click
            local autoPressE = true  -- Set to true to automatically press 'E'
            local autoPressQ = true  -- Set to true to automatically press 'Q'

            -- Auto Click Function
            local function AutoClick()
                while Value do
                    -- Get the current mouse position
                    local mousePosition = UIS:GetMouseLocation()

                    -- Trigger the click event (left or right based on the setting)
                    VIM:SendMouseButtonEvent(mousePosition.X, mousePosition.Y, rightClick and 1 or 0, true, nil, 0)
                    VIM:SendMouseButtonEvent(mousePosition.X, mousePosition.Y, rightClick and 1 or 0, false, nil, 0)

                    -- Wait for the delay
                    wait(delay)
                end
            end

            -- Function to simulate key press
            local function simulateKeyPress(keyCode)
                VIM:SendKeyEvent(true, keyCode, false, game)
                wait(1.5)
                VIM:SendKeyEvent(false, keyCode, false, game)
            end

            -- Function to resize the nape hitbox
            local function resizeNapeHitbox(nape, size)
                if nape and nape:IsA("BasePart") then
                    nape.Size = size
                    print("Nape hitbox resized to " .. tostring(size))
                else
                    warn("Invalid nape part or part is missing!")
                end
            end

            -- Start the auto-clicking and key-pressing in separate threads
            local clickThread = coroutine.create(AutoClick)
            local keyPressThread = coroutine.create(function()
                while Value do
                    if autoPressE then
                        simulateKeyPress(Enum.KeyCode.E)
                    end
                    if autoPressQ then
                        simulateKeyPress(Enum.weyCode.Q)
                    end
                    wait(1.5)
                end
            end)

            coroutine.resume(clickThread)
            coroutine.resume(keyPressThread)

        else
            print("Auto Farm Disabled")
        end
    end
})

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Senbunzakura|Hub",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Made By Syko",
    LoadingSubtitle = "by Syko",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local MainTab = Window:CreateTab("Main", Nil) -- Title, Image
 local Section = MainTab:CreateSection("Main")

 local Divider = MainTab:CreateDivider()

 local Toggle = MainTab:CreateToggle({
    Name = "Nape Extender",
    CurrentValue = false,
    Flag = "EnableTitanResizer", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        if Value then
            local titansFolder = game.Workspace:WaitForChild("Titans")

            -- Loop through each Titan in the Titans folder
            for _, titan in ipairs(titansFolder:GetChildren()) do
                print("Processing Titan:", titan.Name)

                -- Find the Hitboxes folder inside the Titan
                local hitboxes = titan:FindFirstChild("Hitboxes")
                if hitboxes then
                    -- Find the Hit folder inside Hitboxes
                    local hitFolder = hitboxes:FindFirstChild("Hit")
                    if hitFolder then
                        -- Find the Nape part inside Hit
                        local napePart = hitFolder:FindFirstChild("Nape")
                        if napePart and napePart:IsA("BasePart") then
                            -- Set the Nape part's size to 100, 100, 100
                            napePart.Size = Vector3.new(100, 100, 100)
                            print("Resized Nape for Titan:", titan.Name)
                        else
                            warn("No valid 'Nape' part found in Titan:", titan.Name)
                        end
                    else
                        warn("No 'Hit' folder found in Hitboxes for Titan:", titan.Name)
                    end
                else
                    warn("No 'Hitboxes' folder found in Titan:", titan.Name)
                end
            end

            print("Script completed.")
        else
            print("Titan Resizer is disabled.")
        end
    end,
})

-- Create a Toggle
local Toggle = MainTab:CreateToggle({
    Name = "Nape Visibility",  -- Name displayed in the UI
    CurrentValue = false,     -- Initial state of the toggle (false = off, true = on)
    Flag = "EnableNapeVisibility", -- Unique identifier for the toggle
    Callback = function(Value)
        if Value then
            local titansFolder = game.Workspace:WaitForChild("Titans")

            -- Loop through each Titan in the Titans folder
            for _, titan in ipairs(titansFolder:GetChildren()) do
                print("Processing Titan:", titan.Name)

                -- Find the Hitboxes folder inside the Titan
                local hitboxes = titan:FindFirstChild("Hitboxes")
                if hitboxes then
                    -- Find the Hit folder inside Hitboxes
                    local hitFolder = hitboxes:FindFirstChild("Hit")
                    if hitFolder then
                        -- Find the Nape part inside Hit
                        local napePart = hitFolder:FindFirstChild("Nape")
                        if napePart and napePart:IsA("BasePart") then
                            -- Set the Nape part's transparency to 0 (fully visible)
                            napePart.Transparency = 0.01
                            -- Set the Nape part's material to SmoothPlastic
                            napePart.Material = Enum.Material.SmoothPlastic
                            print("Made Nape visible for Titan:", titan.Name)
                        else
                            warn("No valid 'Nape' part found in Titan:", titan.Name)
                        end
                    else
                        warn("No 'Hit' folder found in Hitboxes for Titan:", titan.Name)
                    end
                else
                    warn("No 'Hitboxes' folder found in Titan:", titan.Name)
                end
            end

            print("Nape Visibility enabled.")
        else
            local titansFolder = game.Workspace:WaitForChild("Titans")

            -- Loop through each Titan in the Titans folder
            for _, titan in ipairs(titansFolder:GetChildren()) do
                print("Processing Titan:", titan.Name)

                -- Find the Hitboxes folder inside the Titan
                local hitboxes = titan:FindFirstChild("Hitboxes")
                if hitboxes then
                    -- Find the Hit folder inside Hitboxes
                    local hitFolder = hitboxes:FindFirstChild("Hit")
                    if hitFolder then
                        -- Find the Nape part inside Hit
                        local napePart = hitFolder:FindFirstChild("Nape")
                        if napePart and napePart:IsA("BasePart") then
                            -- Restore the Nape part's transparency to 1 (fully transparent)
                            napePart.Transparency = 1
                            -- Restore the Nape part's material to SmoothPlastic
                            napePart.Material = Enum.Material.SmoothPlastic
                            print("Restored Nape visibility for Titan:", titan.Name)
                        else
                            warn("No valid 'Nape' part found in Titan:", titan.Name)
                        end
                    else
                        warn("No 'Hit' folder found in Hitboxes for Titan:", titan.Name)
                    end
                else
                    warn("No 'Hitboxes' folder found in Titan:", titan.Name)
                end
            end

            print("Nape Visibility disabled.")
        end
    end,
})
